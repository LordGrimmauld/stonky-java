import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id 'java'
    id 'com.github.gmazzo.buildconfig' version '3.0.1'
}

apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'idea'

group "mod.grimmauld.${appid}"
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        url 'https://jitpack.io/'
    }
}


java.toolchain.languageVersion = JavaLanguageVersion.of(17)
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}

compileJava.options.encoding = 'UTF-8'

test {
    useJUnitPlatform()
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : appid,
                "Specification-Vendor"    : "Noobulus",
                "Specification-Version"   : "0.1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "Grimmauld",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def hasUnstaged = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'status', '--porcelain'
        standardOutput = stdout
    }
    def result = stdout.toString().replaceAll("M gradlew", "").trim()
    if (!result.isEmpty())
        println("Found stageable results:\n${result}\n")
    return !result.isEmpty()
}

def hasCommandInstalled = { cmd ->
    if (!DefaultNativePlatform.currentOperatingSystem.isWindows())
        return true
    def stdout = new ByteArrayOutputStream()
    def stderr = new ByteArrayOutputStream()
    return exec {
        ignoreExitValue = true
        standardOutput = stdout
        errorOutput = stderr
        commandLine "where", cmd
    }.getExitValue() == 0 && stdout.toString().trim().contains(cmd)
}

def getGitInfo = { ->
    if (!hasCommandInstalled("git")) {
        println("No git install found in PATH")
        return "NOGIT"
    }
    def stdout = new ByteArrayOutputStream()
    exec {
        standardOutput = stdout
        commandLine "git", "--version"
    }
    println(stdout.toString().trim())
    return "${getGitHash()}" + (hasUnstaged() ? "-modified" : "")
}

buildConfig {
    buildConfigField 'String', 'APPID', "\"${appid}\""
    buildConfigField 'String', 'VERSION', "\"${project.version}\""
    def gitstage = getGitInfo()
    println("Using git stage ${gitstage}")
    buildConfigField "String", "GITHASH", "\"${gitstage}\""

    version = project.version
    packageName = project.group
}